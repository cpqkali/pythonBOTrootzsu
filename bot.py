import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler, ContextTypes
from telegram.helpers import escape_markdown
import telegram.error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    conn = sqlite3.connect("rootzsu_bot.db")
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT
    )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ (–ü—Ä–∞–π—Å-–ª–∏—Å—Ç)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS services (
        service_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        price_usd REAL,
        price_btc REAL,
        price_stars INTEGER
    )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        service_id INTEGER,
        payment_method TEXT,
        status TEXT DEFAULT 'pending_payment',
        payment_proof TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id),
        FOREIGN KEY (service_id) REFERENCES services (service_id)
    )
    """)
    conn.commit()
    conn.close()

def add_initial_services():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."""
    conn = sqlite3.connect("rootzsu_bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM services")
    if cursor.fetchone()[0] == 0:
        services_data = [
            ("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞", "–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", 15.0, 0.00015, 1000),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ root-–ø—Ä–∞–≤", "–î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", 3.0, 0.00002478, 100),
            ("–ü—Ä–æ—à–∏–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 27.0, 0.000223, 2800),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –û–° (–ü–ö)", "Windows, Linux", 11.0, 0.00009085, 1280),
            ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", "–° –∂–µ—Å—Ç–∫–∏—Ö –¥–∏—Å–∫–æ–≤ –∏ SSD", 20.0, 0.00016518, 2200),
            ("–†–µ–∞–Ω–∏–º–∞—Ü–∏—è —Ñ–ª–µ—à-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ USB-–Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π", 25.0, 0.00042, 2050)
        ]
        cursor.executemany("INSERT INTO services (name, description, price_usd, price_btc, price_stars) VALUES (?, ?, ?, ?, ?)", services_data)
        conn.commit()
    conn.close()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ ---
ADMIN_IDS = [7498691085]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID Telegram

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã ---
SELECTING_SERVICE, SELECTING_PAYMENT, UPLOADING_PROOF, ADMIN_CHAT = range(4)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect("rootzsu_bot.db")
    conn.row_factory = sqlite3.Row
    return conn

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    user_id = user.id
    username = user.username
    first_name = user.first_name

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                       (user_id, username, first_name))
        conn.commit()
    conn.close()

    keyboard = [
        [InlineKeyboardButton("üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")],
        [InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="order_service")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_account")],
        [InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")],
    ]
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    safe_first_name = escape_markdown(first_name)
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *rootzsu*, {safe_first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    return 0

async def price_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ –∏—Ö —Ü–µ–Ω—ã."""
    query = update.callback_query
    await query.answer()

    conn = get_db_connection()
    services = conn.execute("SELECT * FROM services").fetchall()
    conn.close()

    if not services:
        await query.edit_message_text("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    message_text = "*üìã –ù–ê–® –ü–†–ê–ô–°-–õ–ò–°–¢ üìã*\n\n"
    for service in services:
        safe_name = escape_markdown(service['name'])
        safe_desc = escape_markdown(service['description'])
        message_text += (
            f"üîπ *{safe_name}*\n"
            f"   _{safe_desc}_\n"
            f"   *–¶–µ–Ω–∞:* ${service['price_usd']} | {service['price_btc']} BTC | {service['price_stars']} ‚≠ê\n\n"
        )

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

# --- –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ ---
async def order_service_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞—è —É—Å–ª—É–≥–∏."""
    query = update.callback_query
    await query.answer()

    conn = get_db_connection()
    services = conn.execute("SELECT service_id, name FROM services").fetchall()
    conn.close()

    if not services:
        await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(s['name'], callback_data=f"select_service_{s['service_id']}")] for s in services]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup)
    return SELECTING_SERVICE

async def select_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏."""
    query = update.callback_query
    service_id = int(query.data.split('_')[-1])
    context.user_data['service_id'] = service_id
    await query.answer()

    conn = get_db_connection()
    service = conn.execute("SELECT * FROM services WHERE service_id = ?", (service_id,)).fetchone()
    conn.close()
    
    safe_name = escape_markdown(service['name'])
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{safe_name}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    keyboard = [
        [InlineKeyboardButton(f"üíµ USD (${service['price_usd']})", callback_data=f"pay_usd_{service_id}")],
        [InlineKeyboardButton(f"ü™ô BTC ({service['price_btc']})", callback_data=f"pay_btc_{service_id}")],
        [InlineKeyboardButton(f"‚≠ê Stars ({service['price_stars']})", callback_data=f"pay_stars_{service_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="order_service")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
    return SELECTING_PAYMENT

async def process_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    parts = query.data.split('_')
    payment_method = parts[1].upper()
    service_id = int(parts[2])

    context.user_data['payment_method'] = payment_method
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = query.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO orders (user_id, service_id, payment_method) VALUES (?, ?, ?)",
                   (user_id, service_id, payment_method))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    context.user_data['order_id'] = order_id

    payment_details = {
        'USD': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ `UQCKtm0RoDtPCyObq18G-FKehsDPaVIiVX5Z8q78P_XfmTUh`.",
        'BTC': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ `UQCKtm0RoDtPCyObq18G-FKehsDPaVIiVX5Z8q78P_XfmTUh`.",
        'STARS': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars."
    }

    text = (
        f"–í–∞—à –∑–∞–∫–∞–∑ `#{order_id}` —Å–æ–∑–¥–∞–Ω.\n\n"
        f"{payment_details[payment_method]}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞* –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await query.edit_message_text(text=text, parse_mode='Markdown')
    return UPLOADING_PROOF

async def upload_proof(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    file_id = photo.file_id
    order_id = context.user_data.get('order_id')

    if not order_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    conn = get_db_connection()
    conn.execute("UPDATE orders SET payment_proof = ?, status = 'pending_approval' WHERE order_id = ?",
                 (file_id, order_id))
    conn.commit()
    service = conn.execute(
        "SELECT s.name FROM services s JOIN orders o ON s.service_id = o.service_id WHERE o.order_id = ?",
        (order_id,)
    ).fetchone()
    conn.close()

    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    safe_service_name = escape_markdown(service['name'], version=2)
    admin_text = (
        f"üîî *–ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\\!*\n\n"
        f"–ó–∞–∫–∞–∑: `#{order_id}`\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.mention_markdown_v2()}\n"
        f"–£—Å–ª—É–≥–∞: *{safe_service_name}*"
    )
    keyboard = [[
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{order_id}")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –§–æ—Ç–æ –Ω–∏–∂–µ:")
            await context.bot.send_photo(
                chat_id=admin_id, 
                photo=file_id, 
                caption=admin_text, 
                reply_markup=reply_markup, 
                parse_mode='MarkdownV2'
            )
        except telegram.error.BadRequest as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    return ConversationHandler.END

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    context.user_data.clear()
    await start(update, context)
    return ConversationHandler.END

# --- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def my_account(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    conn = get_db_connection()
    orders = conn.execute("""
        SELECT o.order_id, o.status, s.name
        FROM orders o
        JOIN services s ON o.service_id = s.service_id
        WHERE o.user_id = ?
    """, (user_id,)).fetchall()
    conn.close()

    status_translation = {
        'pending_payment': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'pending_approval': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        'approved': '–û–¥–æ–±—Ä–µ–Ω',
        'declined': '–û—Ç–∫–ª–æ–Ω–µ–Ω'
    }

    if not orders:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    else:
        message_text = "*üë§ –í–ê–®–ò –ó–ê–ö–ê–ó–´ üë§*\n\n"
        for order in orders:
            safe_name = escape_markdown(order['name'])
            message_text += f"üîπ –ó–∞–∫–∞–∑ `#{order['order_id']}` - *{safe_name}*\n   –°—Ç–∞—Ç—É—Å: _{status_translation.get(order['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}_\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    query = update.callback_query
    if not is_admin(query.from_user.id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_view_users")],
        [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_view_orders")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=reply_markup, parse_mode='Markdown')

async def admin_view_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()

    conn = get_db_connection()
    users = conn.execute("SELECT user_id, first_name, username FROM users").fetchall()
    conn.close()

    message_text = "*üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for user in users:
        safe_name = escape_markdown(user['first_name'] or "N/A")
        safe_username = escape_markdown(user['username'] or "N/A")
        message_text += f"ID: `{user['user_id']}` - {safe_name} (@{safe_username})\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã."""
    query = update.callback_query
    await query.answer()

    conn = get_db_connection()
    orders = conn.execute("""
        SELECT o.order_id, o.user_id, o.status, s.name, u.first_name, u.username
        FROM orders o
        JOIN services s ON o.service_id = s.service_id
        JOIN users u ON o.user_id = u.user_id
    """).fetchall()
    conn.close()

    if not orders:
        message_text = "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        message_text = "*üì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:*\n\n"
        for order in orders:
            safe_service_name = escape_markdown(order['name'])
            user_info = []
            if order['first_name']:
                user_info.append(escape_markdown(order['first_name']))
            if order['username']:
                user_info.append(f"(@{escape_markdown(order['username'])})")
            
            user_display = " ".join(user_info) if user_info else f"ID: {order['user_id']}"

            message_text += (
                f"üîπ *–ó–∞–∫–∞–∑ `#{order['order_id']}`* | {user_display}\n"
                f"   –£—Å–ª—É–≥–∞: *{safe_service_name}*\n"
                f"   –°—Ç–∞—Ç—É—Å: _{order['status']}_\n\n"
            )

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def admin_handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞–∫–∞–∑—É (–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)."""
    query = update.callback_query
    action, order_id_str = query.data.split('_')[1:]
    order_id = int(order_id_str)
    await query.answer(f"–ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    new_status = 'approved' if action == 'approve' else 'declined'
    
    conn = get_db_connection()
    conn.execute("UPDATE orders SET status = ? WHERE order_id = ?", (new_status, order_id))
    conn.commit()
    order_info = conn.execute(
        "SELECT user_id, s.name FROM orders o JOIN services s ON o.service_id = s.service_id WHERE o.order_id = ?", 
        (order_id,)
    ).fetchone()
    conn.close()

    if not order_info:
        await query.edit_message_caption(
            caption=f"{query.message.caption}\n\n--- –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. ---", 
            reply_markup=None
        )
        return

    user_id = order_info['user_id']
    service_name = escape_markdown(order_info['name'], version=2)
    
    user_message = ""
    if new_status == 'approved':
        user_message = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ `#{order_id}` –Ω–∞ —É—Å–ª—É–≥—É *{service_name}* –±—ã–ª *–æ–¥–æ–±—Ä–µ–Ω*! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    else:
        user_message = f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ `#{order_id}` –Ω–∞ —É—Å–ª—É–≥—É *{service_name}* –±—ã–ª *–æ—Ç–∫–ª–æ–Ω–µ–Ω*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."
    
    try:
        await context.bot.send_message(
            chat_id=user_id, 
            text=user_message, 
            parse_mode='MarkdownV2'
        )
    except telegram.error.BadRequest as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
    original_caption = query.message.caption_markdown_v2
    status_text = escape_markdown(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_status.upper()}", version=2)

    await query.edit_message_caption(
        caption=f"{original_caption}\n\n\\-\\-\\-\n*{status_text}*",
        parse_mode='MarkdownV2', 
        reply_markup=None
    )

# --- –ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º ---
async def contact_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ. "
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    return ADMIN_CHAT

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º."""
    user = update.effective_user
    text_to_forward = (
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention_markdown_v2()}* \\(ID: `{user.id}`\\):\n\n"
        f"{escape_markdown(update.message.text, version=2)}"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id, 
                text=text_to_forward, 
                parse_mode='MarkdownV2'
            )
        except telegram.error.BadRequest as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return ADMIN_CHAT

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(update.effective_user.id):
        return

    reply_msg = update.message.reply_to_message
    if reply_msg and reply_msg.from_user and reply_msg.from_user.is_bot:
        original_msg = reply_msg.text or ""
        try:
            # –ü–∞—Ä—Å–∏–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏—â–µ–º —à–∞–±–ª–æ–Ω (ID: `123456789`)
            user_id_str = original_msg.split("(ID: `")[1].split("`)")[0]
            user_id = int(user_id_str)
        except (IndexError, ValueError):
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –µ—Å—Ç—å (ID: `user_id`)"
            )
            return

        reply_text = (
            f"‚úâÔ∏è *–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
            f"{escape_markdown(update.message.text, version=2)}"
        )
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=reply_text,
                parse_mode='MarkdownV2'
            )
            await update.message.reply_text("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )

async def cancel_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º."""
    await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await start(update, context)
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token("8243984344:AAH3SFyuy4I_O62Ml8KcxCgyZTQ4ZVYKep0").build()

    setup_database()
    add_initial_services()
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞
    order_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(order_service_start, pattern='^order_service$')],
        states={
            SELECTING_SERVICE: [CallbackQueryHandler(select_payment_method, pattern='^select_service_')],
            SELECTING_PAYMENT: [CallbackQueryHandler(process_payment_selection, pattern='^pay_')],
            UPLOADING_PROOF: [MessageHandler(filters.PHOTO, upload_proof)],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_order, pattern='^cancel_order$'),
            CallbackQueryHandler(order_service_start, pattern='^order_service$')
        ],
        map_to_parent={ConversationHandler.END: 0},
        per_message=False
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º
    admin_chat_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(contact_admin_start, pattern='^contact_admin$')],
        states={
            ADMIN_CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, forward_to_admin)]
        },
        fallbacks=[CommandHandler('cancel', cancel_chat)],
        map_to_parent={ConversationHandler.END: 0},
        per_message=False
    )

    # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    main_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            0: [
                CallbackQueryHandler(start, pattern='^main_menu$'),
                CallbackQueryHandler(price_list, pattern='^price_list$'),
                CallbackQueryHandler(my_account, pattern='^my_account$'),
                CallbackQueryHandler(admin_panel, pattern='^admin_panel$'),
                CallbackQueryHandler(admin_view_users, pattern='^admin_view_users$'),
                CallbackQueryHandler(admin_view_orders, pattern='^admin_view_orders$'),
                CallbackQueryHandler(admin_handle_order, pattern='^admin_(approve|decline)_'),
                order_conv_handler,
                admin_chat_conv_handler,
            ]
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False
    )

    application.add_handler(main_handler)
    application.add_handler(MessageHandler(filters.REPLY & filters.User(user_id=ADMIN_IDS), reply_to_user))

    application.run_polling()

if __name__ == "__main__":
    main()